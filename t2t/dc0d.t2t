•def ⟪choice⟫ ⎨
  ❨name❩ ≡ •gensym‹"choice"› ⎨
    ❨name❩:: proc (name: string, owner : ^zd.Eh) -> ^zd.Eh {
        handler :: proc (eh: ^zd.Eh, msg: ^zd.Message) {
            exec_choice (eh, msg, []string{○})
        }
        instance_name := zd.gensym ("❨name❩")
        return zd.make_leaf (instance_name, owner, nil, handler)
    }
  ⎬
⎬

○       hole filled by text from diagram, with name prefix stripped off
•...    builtin opetion named "..."
❨...❩   defined variable with name "..."

•def ... ⎨
  ❨...❩ ≡ •...(...) ⎨
    string of characters that may include `❨...❩` and `○` which are expanded to their values within the string
  ⎬
⎬

builtin operators:
•gensym ‹"..."› - creates a unique name with prefix `...` ; the name is guaranteed to be unique in a single run (only)


all builtin operators must be suffixed with a parameter list in Unicode brackets "‹...›"
N.B this tool uses several Unicode characters that cannot be used in any other way
`○`, `•`, `❨`, `❩`, `≡`, `⎨`, `⎬`

t2t {
  script = char+
  char =
    | t2t
    | any

t2t.ohm:
  t2t = "•def" spaces externalName spaces "⎨" spaces applySyntactic<InternalNameDeclaration>* spaces "⎨" stuff "⎬" spaces "⎬" spaces

  InternalNameDeclaration = internalName "≡" BuiltinCall
  internalName = "❨" nameChar+ "❩"
  nameChar = ~reservedChar any
  reservedChar = "○" | "•" | "❨" | "❩" | "≡" | "⎨" | "⎬" | "‹" | "›"
  nonreservedChar = ~reservedChar any
  externalName = nonreservedNameChar+ 
  nonreservedNameChar = ~space ~reservedChar any

  stuff = stuffChar*
  stuffChar =
    | internalName -- expandInternalName
    | "○" -- expandHold
    | nonreservedChar

  BuiltinCall = 
    | "•" "gensym" "‹" string "›" -- gensym

  string = dq notDQ* dq
  dq = "\""
  notDQ = ~dq any

}

t2t.rwr:
t2t {
  script [char+] ‛«pushNewInternalNameDict ()»’ = ‛«char»’
  t2t [_def spaces1 externalName spaces2 lb1 spaces3 InternalNameDeclaration* spaces4 lb2 stuff rb2 spaces5 rb1 spaces6] =
    ‛

  InternalNameDeclaration = internalName "≡" BuiltinCall
  internalName = "❨" nameChar+ "❩"
  externalName = nonreservedNameChar+ 
  nonreservedNameChar = ~space ~reservedChar any

  stuff = stuffChar*
  stuffChar =
    | internalName -- expandInternalName
    | "○" -- expandHold
    | nonreservedChar

  BuiltinCall = 
    | "•" "gensym" "‹" string "›" -- gensym

  string = dq notDQ* dq

}


xname ⎨
  ❨iname❩ ≡ •gensym‹prefix›⎨
    chars including ○ and ❨iname❩
  ⎬
⎬
